package nl.tudelft.sem.template.controllers;

import java.util.List;
import nl.tudelft.sem.template.entities.Room;
import nl.tudelft.sem.template.repositories.RoomRepository;
import nl.tudelft.sem.template.strategy.GetAllRooms;
import nl.tudelft.sem.template.strategy.GetCourseRooms;
import nl.tudelft.sem.template.strategy.GetEmptyRooms;
import nl.tudelft.sem.template.strategy.GetRoom;
import nl.tudelft.sem.template.strategy.Rooms;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.server.ResponseStatusException;




@Controller
@RequestMapping(path = "/rooms")
@SuppressWarnings({"PMD.AvoidDuplicateLiterals", "PMD.DataflowAnomalyAnalysis"})
//Duplicate literals suppressed as identical strings were used multiple times in URLs
//Dataflow anomaly analysis suppressed as the lambda expression in the dispatcher
// is being mistakenly considered as null object
public class RoomController {

    // This means to get the bean called roomRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private transient RoomRepository roomRepository;

    /**
     * Gives a list of all rooms but only if the user is authenticated as a teacher.
     *
     * @return A list of all rooms.
     */
    @GetMapping(path = "/getAllRooms")
    @PreAuthorize("hasRole('TEACHER')")
    @ResponseStatus(value = HttpStatus.OK)
    public @ResponseBody
    List<Room> getAllRooms() {
        Rooms rooms = new Rooms(new GetAllRooms());
        return rooms.getRooms(roomRepository);

    }

    /**
     * Finds all the rounds which belongs to a course.
     *
     * @return the room belonging to a course
     */
    @GetMapping(path = "/findCourse/{courseCode}")
    @ResponseBody
    public List<Room> findRoomByCourse(@PathVariable("courseCode") int courseCode) {
        Rooms rooms = new Rooms(new GetCourseRooms());
        return rooms.getRooms(roomRepository, courseCode);
    }

    /**
     * Finds all rooms which don't have a course assigned to it.
     * Only users with the role as a teacher can get an overview over all empty rooms.
     *
     * @return all rooms which don't have a course assigned to it
     */
    @GetMapping(path = "/findEmptyRooms")
    @PreAuthorize("hasRole('TEACHER')")
    @ResponseBody
    public List<Room> findEmptyRooms() {
        Rooms rooms = new Rooms(new GetEmptyRooms());
        return rooms.getRooms(roomRepository);

    }

    /**
     * Removes the course from the room, making it a room which can be booked later.
     *
     * @param roomCode The room we want to clear
     */
    @GetMapping(path = "/clearRoom/{roomCode}")
    @PreAuthorize("hasRole('TEACHER')")
    @ResponseBody
    public void clearRoom(@PathVariable("roomCode") int roomCode) {
        if (!roomRepository.existsById(roomCode)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Room doesn't exist");
        }

        Rooms rooms = new Rooms(new GetRoom());
        Room room = rooms.getRooms(roomRepository, roomCode).get(0);
        room.setCourseCode(null);
        roomRepository.saveAndFlush(room);
    }

    /**
     * Checks if the room is available for booking.
     *
     * @param roomCode The room we want to check if its available or noy
     * @return true if it is available
     */
    @GetMapping(path = "/available/{roomCode}")
    @ResponseBody
    public boolean isAvailable(@PathVariable("roomCode") int roomCode) {
        if (!roomRepository.existsById(roomCode)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Room doesn't exist");
        }

        Rooms rooms = new Rooms(new GetRoom());
        Room room = rooms.getRooms(roomRepository, roomCode).get(0);

        Integer code = room.getCourseCode();
        return code == null;
    }

    /**
     * Gives you the maximum occupants a room can hold.
     *
     * @param roomCode The room we want the max size from
     * @return The size of the room
     */
    @GetMapping(path = "/maxSize/{roomCode}")
    @ResponseBody
    public int getMaxCapacity(@PathVariable("roomCode") int roomCode) {
        if (!roomRepository.existsById(roomCode)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Room doesn't exist");
        }

        Rooms rooms = new Rooms(new GetRoom());
        Room room = rooms.getRooms(roomRepository, roomCode).get(0);

        return room.getMaxSize();
    }

    /**
     * Books the given room for the given course.
     *
     * @param roomCode   The room we want to book.
     * @param courseCode The course for which we are booking the room for.
     */
    @GetMapping(path = "/bookRoom/{roomCode}/{courseCode}")
    @PreAuthorize("hasRole('TEACHER')")
    @ResponseBody
    public void bookRoom(@PathVariable("roomCode") int roomCode,
                         @PathVariable("courseCode") int courseCode) {


        if (!roomRepository.existsById(roomCode)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Room doesn't exist");
        }

        Rooms rooms = new Rooms(new GetRoom());
        Room room = rooms.getRooms(roomRepository, roomCode).get(0);

        Integer code = room.getCourseCode();
        if (code == null) {
            room.setCourseCode(courseCode);
            roomRepository.saveAndFlush(room);
        } else {
            throw new ResponseStatusException(HttpStatus.CONFLICT,
                    "Room is already booked by a course");
        }
    }


    /**
     * Checks if the room can fit the given size.
     *
     * @param roomCode Room code of the room
     * @param size     Size to check if it fits in the room.
     */
    @GetMapping(path = "/checkFit/{roomCode}/{size}")
    @ResponseBody
    public boolean checkFit(@PathVariable("roomCode") int roomCode,
                            @PathVariable("size") int size) {
        //Need to change to proper error message later.
        if (!roomRepository.existsById(roomCode)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Room doesn't exist");
        }

        Rooms rooms = new Rooms(new GetRoom());
        Room room = rooms.getRooms(roomRepository, roomCode).get(0);
        return (size <= room.getMaxSize());
    }

}